{"version":3,"sources":["../../src/components/directed-requester.js"],"names":["debug","require","Requester","IDENTIFIER","module","exports","DirectedRequester","constructor","advertisement","discoveryOptions","sock","send","socketSend","bind","n","args","requesterSock","socks","length","enqueue","data","fn","pop","Error","possibleNodes","Object","values","discovery","nodes","filter","node","subgroup","possibleSocks","map","find","remoteAddress","address","remotePort","port","hasCallback","push","id","callbacks","write","pack"],"mappings":"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","sourcesContent":["const debug = require('debug')('axon:req');\n\nconst Requester = require('./requester');\nconst IDENTIFIER = '__subgroup';\n\nmodule.exports = class DirectedRequester extends Requester {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n        this.sock.send = this.socketSend.bind(this);\n        this.n = 0;\n    }\n\n    socketSend(...args) {\n        // Enqueue if no socks connected yet\n        const requesterSock = this.sock;\n        if (!requesterSock.socks || !requesterSock.socks.length) {\n            debug('no connected peers');\n            return this.sock.enqueue(args);\n        }\n\n        const data = args[0];\n        // Requires selector parameter\n        if (!data[IDENTIFIER]) {\n            let fn = args.pop();\n            fn(new Error(`send() needs a \"${IDENTIFIER}\" property in the request body when using DirectedRequester`));\n        }\n\n        // Find correct node\n        const possibleNodes = Object.values(this.discovery.nodes).filter((node) => {\n            return node.advertisement.subgroup == data[IDENTIFIER];\n        });\n\n        // Find corresponding sockets\n        const possibleSocks = possibleNodes.map((node) => {\n            return requesterSock.socks.find((sock) => {\n                return sock.remoteAddress == node.address &&\n                       sock.remotePort == node.advertisement.port;\n            });\n        }).filter((sock) => sock);\n\n        // Load balance between sockets\n        const sock = possibleSocks[this.n++ % possibleSocks.length];\n\n        // Enqueue if the correct sock did not connect yet/does not exist\n        if (!sock) return this.sock.enqueue(args);\n\n        // Save callback\n        let hasCallback = 'function' == typeof args[args.length - 1];\n        if (!hasCallback) args.push(function() {});\n        let fn = args.pop();\n        fn.id = requesterSock.id();\n        requesterSock.callbacks[fn.id] = fn;\n        args.push(fn.id);\n\n        // Remove identifier from message\n        delete args[0][IDENTIFIER];\n\n        // Send over sock\n        sock.write(requesterSock.pack(args));\n    };\n};\n"],"file":"directed-requester.js"}