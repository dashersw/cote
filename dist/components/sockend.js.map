{"version":3,"sources":["../../src/components/sockend.js"],"names":["EventEmitter","require","EventEmitter2","util","Discovery","axon","Subscriber","Requester","Configurable","Component","module","exports","io","advertisement","discoveryOptions","originalKey","key","requesterTransformators","startDiscovery","namespaces","discovery","on","obj","axon_type","Array","isArray","respondsTo","namespace","normalizedNamespace","requester","name","originalRequestOnAdded","onAdded","bind","requesterSocketHandler","socket","forEach","topic","data","cb","type","transFn","send","server","of","sId","sockets","publisherNamespaces","subscriber","subscribesTo","broadcasts","onMonitorAdded","event","split","length","slice","join","emitter","__room","__rooms","Set","add","rooms","room","to","emit"],"mappings":"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","file":"sockend.js","sourcesContent":["const EventEmitter = require('eventemitter2').EventEmitter2;\nconst util = require('util');\nconst Discovery = require('./discovery');\nconst axon = require('@dashersw/axon');\nconst Subscriber = require('./subscriber');\nconst Requester = require('./requester');\nconst Configurable = require('./configurable');\nconst Component = require('./component');\n\nmodule.exports = class Sockend extends Configurable(Component) {\n    constructor(io, advertisement, discoveryOptions) {\n        const originalKey = advertisement.key;\n        super(advertisement, discoveryOptions);\n\n        this.requesterTransformators = [];\n\n        this.startDiscovery();\n\n        const namespaces = {};\n\n        this.discovery.on('added', (obj) => {\n            if (obj.advertisement.axon_type != 'rep') return;\n            if (obj.advertisement.key != this.advertisement.key) return;\n            if (!Array.isArray(obj.advertisement.respondsTo)) return;\n\n            const namespace = obj.advertisement.namespace;\n            const normalizedNamespace = namespace || '';\n\n            if (namespaces['/' + normalizedNamespace]) return;\n\n            namespaces['/' + normalizedNamespace] = true;\n            obj.namespace = namespace;\n\n            const requester = new Requester({\n                name: 'sockendReq',\n                namespace,\n                key: originalKey,\n            }, discoveryOptions);\n            obj.requester = requester;\n\n            const originalRequestOnAdded = requester.onAdded.bind(requester);\n            requester.onAdded = (obj) => {\n                if (!Array.isArray(obj.advertisement.respondsTo)) return;\n                originalRequestOnAdded(obj);\n            };\n\n            obj.requesterSocketHandler = (socket) => {\n                obj.advertisement.respondsTo.forEach((topic) => {\n                    socket.on(topic, (data, cb) => {\n                        if (typeof data == 'function' && typeof cb == 'undefined') {\n                            cb = data;\n                            data = {};\n                        }\n\n                        data.type = topic;\n\n                        this.requesterTransformators.forEach((transFn) => transFn(data, socket));\n\n                        requester.send(data, cb);\n                    });\n                });\n            };\n\n            let server = io.of('/');\n            if (namespace) server = io.of('/' + namespace);\n            server.on('connection', obj.requesterSocketHandler);\n\n            for (let sId in server.sockets) {\n                obj.requesterSocketHandler(server.sockets[sId]);\n            }\n        });\n\n        const publisherNamespaces = {};\n\n        this.discovery.on('added', (obj) => {\n            if (obj.advertisement.axon_type != 'pub-emitter') return;\n            if (obj.advertisement.key != this.advertisement.key) return;\n\n            const namespace = obj.advertisement.namespace;\n            const normalizedNamespace = namespace || '';\n\n            if (publisherNamespaces['/' + normalizedNamespace]) return;\n\n            publisherNamespaces['/' + normalizedNamespace] = true;\n            obj.namespace = namespace;\n\n            const subscriber = new Subscriber({\n                name: 'sockendSub',\n                namespace: namespace,\n                key: originalKey,\n                subscribesTo: obj.advertisement.broadcasts,\n            }, discoveryOptions);\n\n            subscriber.onMonitorAdded = () => {\n            };\n\n            obj.subscriber = subscriber;\n\n            subscriber.on('**', function (data) {\n                if (this.event == 'cote:added' || this.event == 'cote:removed') return;\n\n                let topic = this.event.split('::');\n                let namespace = '';\n                if (topic.length > 1) {\n                    namespace += '/' + topic[0];\n                    topic = topic.slice(1);\n                }\n                topic = topic.join('');\n\n                let emitter = io.of(namespace);\n                if (data.__room) {\n                    data.__rooms = new Set(data.__rooms || []);\n                    data.__rooms.add(data.__room);\n                    delete data.__room;\n                }\n                if (data.__rooms) {\n                    const rooms = data.__rooms;\n                    delete data.__rooms;\n                    rooms.forEach((room) => {\n                        emitter.to(room).emit(topic, data);\n                    });\n                } else {\n                    emitter.emit(topic, data);\n                }\n            });\n        });\n    };\n\n    get type() {\n        return 'sockend';\n    }\n};\n"]}