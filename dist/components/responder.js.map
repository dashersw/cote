{"version":3,"sources":["../../src/components/responder.js"],"names":["axon","require","portfinder","Configurable","Component","module","exports","Responder","constructor","advertisement","discoveryOptions","sock","types","type","on","startDiscovery","req","cb","emit","onPort","err","port","bind","server","code","getPort","host","address","listener","args","rv","pop","then","val","oppo"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAzB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,SAAN,SAAwBJ,YAAY,CAACC,SAAD,CAApC,CAAgD;AAC7DI,EAAAA,WAAW,CAACC,aAAD,EAAgBC,gBAAhB,EAAkC;AACzC,UAAMD,aAAN,EAAqBC,gBAArB;AAEA,SAAKC,IAAL,GAAY,IAAIX,IAAI,CAACY,KAAL,CAAW,KAAKC,IAAhB,CAAJ,EAAZ;AACA,SAAKF,IAAL,CAAUG,EAAV,CAAa,MAAb,EAAqB,MAAM,KAAKC,cAAL,EAA3B;AAEA,SAAKJ,IAAL,CAAUG,EAAV,CAAa,SAAb,EAAwB,CAACE,GAAD,EAAMC,EAAN,KAAa;AACjC,UAAI,CAACD,GAAG,CAACH,IAAT,EAAe;AAEf,WAAKK,IAAL,CAAUF,GAAG,CAACH,IAAd,EAAoBG,GAApB,EAAyBC,EAAzB;AACH,KAJD;;AAMA,UAAME,MAAM,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC1B,WAAKZ,aAAL,CAAmBY,IAAnB,GAA0B,CAACA,IAA3B;AAEA,WAAKV,IAAL,CAAUW,IAAV,CAAeD,IAAf;AACA,WAAKV,IAAL,CAAUY,MAAV,CAAiBT,EAAjB,CAAoB,OAApB,EAA8BM,GAAD,IAAS;AAClC,YAAIA,GAAG,CAACI,IAAJ,IAAY,YAAhB,EAA8B,MAAMJ,GAAN;AAE9BlB,QAAAA,UAAU,CAACuB,OAAX,CAAmB;AACfC,UAAAA,IAAI,EAAE,KAAKhB,gBAAL,CAAsBiB,OADb;AAEfN,UAAAA,IAAI,EAAE,KAAKZ,aAAL,CAAmBY;AAFV,SAAnB,EAGGF,MAHH;AAIH,OAPD;AAQH,KAZD;;AAcAjB,IAAAA,UAAU,CAACuB,OAAX,CAAmB;AACfC,MAAAA,IAAI,EAAE,KAAKhB,gBAAL,CAAsBiB,OADb;AAEfN,MAAAA,IAAI,EAAEZ,aAAa,CAACY;AAFL,KAAnB,EAGGF,MAHH;AAIH;;AAEDL,EAAAA,EAAE,CAACD,IAAD,EAAOe,QAAP,EAAiB;AACf,UAAMd,EAAN,CAASD,IAAT,EAAe,CAAC,GAAGgB,IAAJ,KAAa;AACxB,YAAMC,EAAE,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAAnB;AACA,YAAMZ,EAAE,GAAGY,IAAI,CAACE,GAAL,EAAX;AAEA,UAAI,CAACD,EAAD,IAAO,OAAOA,EAAE,CAACE,IAAV,IAAkB,UAAzB,IAAuC,OAAOf,EAAP,IAAa,UAAxD,EAAoE;AACpEa,MAAAA,EAAE,CAACE,IAAH,CAASC,GAAD,IAAShB,EAAE,CAAC,IAAD,EAAOgB,GAAP,CAAnB,EAAgChB,EAAhC;AACH,KAND;AAOH;;AAED,MAAIJ,IAAJ,GAAW;AACP,WAAO,KAAP;AACH;;AAED,MAAIqB,IAAJ,GAAW;AACP,WAAO,KAAP;AACH;;AAjD4D,CAAjE","sourcesContent":["const axon = require('@dashersw/axon');\nconst portfinder = require('portfinder');\nconst Configurable = require('./configurable');\nconst Component = require('./component');\n\nmodule.exports = class Responder extends Configurable(Component) {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        this.sock = new axon.types[this.type]();\n        this.sock.on('bind', () => this.startDiscovery());\n\n        this.sock.on('message', (req, cb) => {\n            if (!req.type) return;\n\n            this.emit(req.type, req, cb);\n        });\n\n        const onPort = (err, port) => {\n            this.advertisement.port = +port;\n\n            this.sock.bind(port);\n            this.sock.server.on('error', (err) => {\n                if (err.code != 'EADDRINUSE') throw err;\n\n                portfinder.getPort({\n                    host: this.discoveryOptions.address,\n                    port: this.advertisement.port,\n                }, onPort);\n            });\n        };\n\n        portfinder.getPort({\n            host: this.discoveryOptions.address,\n            port: advertisement.port,\n        }, onPort);\n    }\n\n    on(type, listener) {\n        super.on(type, (...args) => {\n            const rv = listener(...args);\n            const cb = args.pop();\n\n            if (!rv || typeof rv.then != 'function' || typeof cb != 'function') return;\n            rv.then((val) => cb(null, val), cb);\n        });\n    }\n\n    get type() {\n        return 'rep';\n    }\n\n    get oppo() {\n        return 'req';\n    }\n};\n"],"file":"responder.js"}